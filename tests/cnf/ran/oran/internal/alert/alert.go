package alert

import (
	"fmt"
	"time"

	"github.com/go-openapi/strfmt"
	"github.com/google/uuid"
	alertmanagerv2 "github.com/prometheus/alertmanager/api/v2/client"
	"github.com/prometheus/alertmanager/api/v2/client/alert"
	"github.com/prometheus/alertmanager/api/v2/models"
)

// TestName is the name to use for the test alert.
const TestName = "EcoGotestsTestAlert"

// Severity is the severity of the alert. These values correspond to the perceivedSeverity field in the
// AlarmEventRecord.
type Severity string

//nolint:revive // These just correspond to the values for Alertmanager and do not need comments.
const (
	SeverityCleared  Severity = "cleared"
	SeverityCritical Severity = "critical"
	SeverityMajor    Severity = "major"
	SeverityMinor    Severity = "minor"
	SeverityWarning  Severity = "warning"
	SeverityInfo     Severity = "info"
)

// CreatePostable creates a postable alert with the given severity and cluster ID added as labels. It sets the
// "alertname" label to TestName. The start time is the current time and the end time is 10 minutes from the start time.
func CreatePostable(severity Severity, clusterID string) *models.PostableAlert {
	return &models.PostableAlert{
		Alert: models.Alert{
			Labels: map[string]string{
				"alertname":       TestName,
				"severity":        string(severity),
				"managed_cluster": clusterID,
			},
		},
		StartsAt: strfmt.DateTime(time.Now()),
		EndsAt:   strfmt.DateTime(time.Now().Add(time.Hour)),
	}
}

// SendToClient sends the postable alert to the Alertmanager API. If successful, it returns the value of the "tracker"
// label. Otherwise, it returns an error. It modifies the postable alert in place to add the "tracker" label.
//
// This "tracker" label is a UUID that is generated by this function to allow the caller to uniquely identify the alert.
func SendToClient(alertsClient *alertmanagerv2.AlertmanagerAPI, postableAlert *models.PostableAlert) (string, error) {
	if postableAlert.Alert.Labels == nil {
		postableAlert.Alert.Labels = make(map[string]string, 1)
	}

	tracker := uuid.New().String()
	postableAlert.Alert.Labels["tracker"] = tracker

	params := alert.NewPostAlertsParams().WithTimeout(30 * time.Second).WithAlerts(models.PostableAlerts{postableAlert})
	_, err := alertsClient.Alert.PostAlerts(params)

	if err != nil {
		return "", fmt.Errorf("failed to send alert to client: %w", err)
	}

	return tracker, nil
}
